services:
    # PostgreSQL with optimized settings
    postgres:
        image: postgres:16-alpine
        container_name: mankahi-postgres-prod
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_MULTIPLE_DATABASES: mankahi_auth,mankahi_blog,mankahi_analytics
        ports:
            - "5432:5432"
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ../postgres:/docker-entrypoint-initdb.d
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: "4"
                    memory: 8G
        command: >
            postgres
            -c shared_buffers=2GB
            -c effective_cache_size=6GB
            -c maintenance_work_mem=512MB
            -c random_page_cost=1.1
            -c effective_io_concurrency=200
            -c work_mem=6553kB
            -c min_wal_size=1GB
            -c max_wal_size=4GB
            -c checkpoint_completion_target=0.9
            -c default_statistics_target=100
            -c max_connections=200

    # Redis with persistence and optimized settings
    redis:
        image: redis:alpine
        container_name: mankahi-redis-prod
        command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/data
        deploy:
            resources:
                limits:
                    cpus: "2"
                    memory: 4G
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    # MinIO with optimized settings
    minio:
        image: minio/minio
        container_name: mankahi-minio-prod
        ports:
            - "9000:9000"
            - "9001:9001"
        environment:
            MINIO_ROOT_USER: ${MINIO_ROOT_USER}
            MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
        volumes:
            - minio-data:/data
        command: server /data --console-address ":9001"
        deploy:
            resources:
                limits:
                    cpus: "2"
                    memory: 4G
        healthcheck:
            test: ["CMD", "mc", "ready", "local"]
            interval: 30s
            timeout: 20s
            retries: 3

    # Elasticsearch with production settings
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        container_name: mankahi-elasticsearch-prod
        environment:
            - node.name=es01
            - cluster.name=mankahi-es-cluster
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
            - xpack.security.enabled=true
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
        ports:
            - "9200:9200"
        volumes:
            - elasticsearch-data:/usr/share/elasticsearch/data
        deploy:
            resources:
                limits:
                    cpus: "4"
                    memory: 8G
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "curl -s --cacert config/certs/http_ca.crt https://localhost:9200 | grep -q 'missing authentication'",
                ]
            interval: 30s
            timeout: 10s
            retries: 5

    # Auth Service
    auth-service:
        build:
            context: ../../backend/auth-service
            target: production
        container_name: mankahi-auth-prod
        restart: unless-stopped
        environment:
            NODE_ENV: production
            PORT: 3001
            DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mankahi_auth
            REDIS_URL: redis://redis:6379
            JWT_SECRET: ${JWT_SECRET}
            JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
            GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
            GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
            RATE_LIMIT_WINDOW: 900
            RATE_LIMIT_MAX_REQUESTS: 100
            CORS_ORIGIN: ${CORS_ORIGIN}
        deploy:
            replicas: 2
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "1"
                    memory: 1G
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:3001/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Blog Service
    blog-service:
        build:
            context: ../../backend/blog-service
            target: production
        container_name: mankahi-blog-prod
        restart: unless-stopped
        environment:
            NODE_ENV: production
            PORT: 3002
            DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mankahi_blog
            REDIS_URL: redis://redis:6379
            ELASTICSEARCH_URL: https://elastic:${ELASTIC_PASSWORD}@elasticsearch:9200
            ELASTICSEARCH_INDEX_SHARDS: 3
            ELASTICSEARCH_INDEX_REPLICAS: 1
            MINIO_ENDPOINT: minio
            MINIO_PORT: 9000
            MINIO_USE_SSL: "true"
            MINIO_ACCESS_KEY: ${MINIO_ROOT_USER}
            MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
            AUTH_SERVICE_URL: http://auth-service:3001
            RATE_LIMIT_WINDOW: 900
            RATE_LIMIT_MAX_REQUESTS: 100
            CORS_ORIGIN: ${CORS_ORIGIN}
            BLOG_CACHE_TTL: 3600
            SEARCH_CACHE_TTL: 300
            MAX_FILE_SIZE: 5242880
        volumes:
            - blog-uploads:/app/uploads
        deploy:
            replicas: 3
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "2"
                    memory: 2G
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:3002/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Analytics Service
    analytics-service:
        build:
            context: ../../backend/analytics-service
            target: production
        container_name: mankahi-analytics-prod
        restart: unless-stopped
        environment:
            NODE_ENV: production
            PORT: 3003
            DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mankahi_analytics
            REDIS_URL: redis://redis:6379
            LOG_LEVEL: info
            RATE_LIMIT_WINDOW: 60000
            RATE_LIMIT_MAX: 60
            DASHBOARD_RATE_LIMIT_MAX: 300
            CORS_ORIGIN: ${CORS_ORIGIN}
        volumes:
            - analytics-logs:/app/logs
        deploy:
            replicas: 2
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "1"
                    memory: 1G
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:3003/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Admin Service
    admin-service:
        build:
            context: ../../backend/admin-service
            target: production
        container_name: mankahi-admin-prod
        restart: unless-stopped
        environment:
            NODE_ENV: production
            PORT: 3004
            DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mankahi_blog
            JWT_SECRET: ${JWT_SECRET}
            JWT_EXPIRES_IN: 1d
            ANALYTICS_SERVICE_URL: http://analytics-service:3003
            ADMIN_RATE_LIMIT_WINDOW: 900000
            ADMIN_RATE_LIMIT_MAX: 100
            LOG_LEVEL: info
            CORS_ORIGIN: ${CORS_ORIGIN}
        volumes:
            - admin-logs:/app/logs
        deploy:
            replicas: 2
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "1"
                    memory: 1G
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:3004/health"]
            interval: 30s
            timeout: 10s
            retries: 3

    # Frontend
    frontend:
        build:
            context: ../../frontend
            target: production
        container_name: mankahi-frontend-prod
        restart: unless-stopped
        environment:
            NODE_ENV: production
            NUXT_PUBLIC_API_BASE: ${API_BASE_URL}
        deploy:
            replicas: 3
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "1"
                    memory: 1G
        healthcheck:
            test: ["CMD", "wget", "--spider", "http://localhost:3000"]
            interval: 30s
            timeout: 10s
            retries: 3

    # API Gateway
    nginx:
        image: nginx:latest
        container_name: mankahi-nginx-prod
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ../nginx/cors.conf:/etc/nginx/cors.conf:ro
            - ../nginx/ssl:/etc/nginx/ssl:ro
            - blog-uploads:/var/www/uploads
            - nginx-logs:/var/log/nginx
        deploy:
            replicas: 2
            update_config:
                parallelism: 1
                delay: 10s
            resources:
                limits:
                    cpus: "2"
                    memory: 2G
        healthcheck:
            test: ["CMD", "nginx", "-t"]
            interval: 30s
            timeout: 10s
            retries: 3

volumes:
    postgres-data:
        driver: local
    redis-data:
        driver: local
    elasticsearch-data:
        driver: local
    minio-data:
        driver: local
    blog-uploads:
        driver: local
    analytics-logs:
        driver: local
    admin-logs:
        driver: local
    nginx-logs:
        driver: local
