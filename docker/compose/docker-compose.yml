name: "mankahi-dev-compose"

networks:
    frontend:
    backend:
    monitoring:

services:
    # Database Initialization Service
    init-db:
        build:
            context: ../../backend
            dockerfile: init-service/Dockerfile
        container_name: mankahi-init-db
        depends_on:
            postgres:
                condition: service_healthy
        env_file:
            - .env.development
        volumes:
            - ../../backend/shared:/app/shared
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M
        restart: "no"
        networks:
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # PostgreSQL
    postgres:
        image: postgres:16-alpine
        container_name: mankahi-postgres
        env_file:
            - .env.development
        ports:
            - "5432:5432"
        volumes:
            - postgres-data:/var/lib/postgresql/data
            - ../scripts/init-db.sh:/docker-entrypoint-initdb.d/init.sh
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            timeout: 5s
            retries: 5
        deploy:
            resources:
                limits:
                    cpus: "2"
                    memory: 4G
        command: >
            postgres
            -c shared_buffers=1GB
            -c effective_cache_size=2GB
            -c work_mem=32MB
            -c maintenance_work_mem=256MB
            -c max_connections=100
        networks:
            - backend
        stop_grace_period: 30s
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Redis
    redis:
        image: redis:alpine
        container_name: mankahi-redis
        ports:
            - "6379:6379"
        volumes:
            - redis-data:/data
        command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - backend
        stop_grace_period: 20s
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # MinIO
    minio:
        image: minio/minio
        container_name: mankahi-minio
        ports:
            - "9000:9000"
            - "9001:9001"
        env_file:
            - .env.development
        environment:
            - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
            - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
        volumes:
            - minio-data:/data
        command: server /data --console-address ":9001"
        healthcheck:
            test: ["CMD", "mc", "ready", "local"]
            interval: 30s
            timeout: 20s
            retries: 3
        networks:
            - backend
        stop_grace_period: 20s
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Elasticsearch
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
        container_name: mankahi-elasticsearch
        env_file:
            - .env.development
        environment:
            - node.name=es01
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms512m -Xmx512m
            - xpack.security.enabled=false
            - bootstrap.memory_lock=true
        ports:
            - "9200:9200"
        volumes:
            - elasticsearch-data:/usr/share/elasticsearch/data
        healthcheck:
            test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=60s"]
            interval: 30s
            timeout: 10s
            retries: 5
        ulimits:
            memlock:
                soft: -1
                hard: -1
        networks:
            - backend
        stop_grace_period: 30s
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Auth Service
    auth-service:
        build:
            context: ../../backend
            dockerfile: auth-service/Dockerfile
            target: development
        container_name: mankahi-auth
        ports:
            - "3001:3001"
        depends_on:
            init-db:
                condition: service_completed_successfully
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env.development
        volumes:
            - ../../backend/auth-service:/app/auth-service
            - ../../backend/shared:/app/shared
            - /app/auth-service/node_modules
        command: npm run dev
        working_dir: /app/auth-service
        healthcheck:
            test: ["CMD-SHELL", "curl -sf http://localhost:3001/health | grep -q '\"status\":\"healthy\"'"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Blog Service
    blog-service:
        build:
            context: ../../backend
            dockerfile: blog-service/Dockerfile
            target: development
        container_name: mankahi-blog
        ports:
            - "3002:3002"
        depends_on:
            init-db:
                condition: service_completed_successfully
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            elasticsearch:
                condition: service_healthy
        env_file:
            - .env.development
        environment:
            - PORT=3002
        volumes:
            - ../../backend/blog-service:/app/blog-service
            - ../../backend/shared:/app/shared
            - /app/blog-service/node_modules
            - blog-uploads:/app/blog-service/uploads
        command: npm run dev
        working_dir: /app/blog-service
        healthcheck:
            test: ["CMD-SHELL", "curl -sf http://localhost:3002/health | grep -q '\"status\":\"healthy\"'"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Analytics Service
    analytics-service:
        build:
            context: ../../backend
            dockerfile: analytics-service/Dockerfile
            target: development
        container_name: mankahi-analytics
        ports:
            - "3003:3003"
        depends_on:
            init-db:
                condition: service_completed_successfully
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        env_file:
            - .env.development
        environment:
            - PORT=3003
        volumes:
            - ../../backend/analytics-service:/app/analytics-service
            - ../../backend/shared:/app/shared
            - /app/analytics-service/node_modules
            - analytics-logs:/app/analytics-service/logs
        command: npx ts-node-dev -r tsconfig-paths/register --respawn --transpile-only src/server.ts
        working_dir: /app/analytics-service
        healthcheck:
            test: ["CMD-SHELL", "curl -sf http://localhost:3003/health | grep -q '\"status\":\"healthy\"'"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Admin Service
    admin-service:
        build:
            context: ../../backend
            dockerfile: admin-service/Dockerfile
            target: development
        container_name: mankahi-admin
        ports:
            - "3004:3004"
        depends_on:
            init-db:
                condition: service_completed_successfully
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
            analytics-service:
                condition: service_healthy
        env_file:
            - .env.development
        environment:
            - PORT=3004
        volumes:
            - ../../backend/admin-service:/app/admin-service
            - ../../backend/shared:/app/shared
            - /app/admin-service/node_modules
            - admin-logs:/app/admin-service/logs
        command: npm run dev
        working_dir: /app/admin-service
        healthcheck:
            test: ["CMD-SHELL", "curl -sf http://localhost:3004/health | grep -q '\"status\":\"healthy\"'"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        networks:
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Frontend
    frontend:
        build:
            context: ../../frontend
            target: development
        container_name: mankahi-frontend
        ports:
            - "3000:3000"
        depends_on:
            auth-service:
                condition: service_healthy
            blog-service:
                condition: service_healthy
            analytics-service:
                condition: service_healthy
            admin-service:
                condition: service_healthy
        env_file:
            - .env.development
        environment:
            - NUXT_PUBLIC_API_URL=http://localhost:80
        volumes:
            - ../../frontend:/app
            - /app/node_modules
        command: npm run dev
        networks:
            - frontend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # API Gateway
    nginx:
        image: nginx:latest
        container_name: mankahi-nginx
        ports:
            - "80:80"
            - "443:443"
        depends_on:
            frontend:
                condition: service_started
            auth-service:
                condition: service_healthy
            blog-service:
                condition: service_healthy
            analytics-service:
                condition: service_healthy
            admin-service:
                condition: service_healthy
        volumes:
            - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ../nginx/cors.conf:/etc/nginx/cors.conf:ro
            - ../nginx/ssl:/etc/nginx/ssl:ro
            - blog-uploads:/var/www/uploads
            - nginx-logs:/var/log/nginx
        healthcheck:
            test: ["CMD", "nginx", "-t"]
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - frontend
            - backend
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Prometheus
    prometheus:
        image: prom/prometheus:latest
        container_name: mankahi-prometheus
        ports:
            - "9090:9090"
        volumes:
            - ../prometheus:/etc/prometheus
            - prometheus-data:/prometheus
        command: --config.file=/etc/prometheus/prometheus.yml
        depends_on:
            - auth-service
            - blog-service
            - admin-service
            - analytics-service
        healthcheck:
            test: ["CMD-SHELL", "wget -qO- http://localhost:9090/-/ready | grep -q 'Ready'"]
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - backend
            - monitoring
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

    # Grafana
    grafana:
        image: grafana/grafana-enterprise:latest
        container_name: mankahi-grafana
        ports:
            - "3005:3000"
        volumes:
            - grafana-data:/var/lib/grafana
            - ../../kubernetes/base/dashboards:/var/lib/grafana/dashboards
        environment:
            - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
            - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
            - GF_AUTH_ANONYMOUS_ENABLED=false
            - GF_SERVER_ROOT_URL=http://localhost:3005
        depends_on:
            - prometheus
        healthcheck:
            test: ["CMD-SHELL", 'curl -sf http://localhost:3000/api/health | grep -q "  \"database\": \"ok\""']
            interval: 30s
            timeout: 10s
            retries: 3
        networks:
            - monitoring
        logging:
            driver: "json-file"
            options:
                max-size: "100m"
                max-file: "3"

volumes:
    postgres-data:
    redis-data:
    elasticsearch-data:
    minio-data:
    blog-uploads:
    analytics-logs:
    admin-logs:
    nginx-logs:
    prometheus-data:
    grafana-data:
