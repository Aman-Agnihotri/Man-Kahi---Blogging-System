apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: mankahi
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: mankahi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      automountServiceAccountToken: false
      containers:
        - name: prometheus
          image: prom/prometheus:v2.45.0
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=30d"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-storage
              mountPath: /prometheus
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
              ephemeral-storage: "10Gi"
            limits:
              memory: "1Gi"
              cpu: "500m"
              ephemeral-storage: "12Gi"
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-storage
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: mankahi
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: mankahi
data:
  grafana.ini: |
    [auth.anonymous]
    enabled = true
    org_role = Viewer
    [security]
    admin_user = admin
    [dashboards]
    default_home_dashboard_path = /var/lib/grafana/dashboards/auth-dashboard.json
    [dashboards.provisioning]
    allow_ui_updates = true
    path = /var/lib/grafana/dashboards
    [security]
    admin_user = admin
    allow_embedding = true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning
  namespace: mankahi
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'Man Kahi Dashboards'
        orgId: 1
        folder: 'Services'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
        alerting:
          alertmanager:
            enabled: true
            apiVersion: v2
            implementation: prometheus
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: mankahi
data:
  system-overview.json: |
    {
      "$schema": "https://raw.githubusercontent.com/grafana/grafana/master/docs/sources/developers/plugins/platform/schema/schema.json",
      "title": "System Overview",
      "uid": "system-overview",
      "version": 1
    }
  auth-dashboard.json: |
    {
      "$schema": "https://raw.githubusercontent.com/grafana/grafana/master/docs/sources/developers/plugins/platform/schema/schema.json",
      "annotations": {
        "list": []
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "title": "Authentication Overview",
          "type": "row",
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          }
        },
        {
          "title": "Active Tokens",
          "type": "gauge",
          "gridPos": {
            "h": 8,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "targets": [
            {
              "expr": "auth_active_tokens",
              "refId": "A"
            }
          ],
          "options": {
            "reduceOptions": {
              "values": false,
              "calcs": ["lastNotNull"],
              "fields": ""
            },
            "orientation": "auto",
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "fieldConfig": {
            "defaults": {
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  { "color": "green", "value": null },
                  { "color": "yellow", "value": 1000 },
                  { "color": "red", "value": 5000 }
                ]
              }
            }
          }
        },
        {
          "title": "Authentication Attempts",
          "type": "timeseries",
          "gridPos": {
            "h": 8,
            "w": 16,
            "x": 8,
            "y": 1
          },
          "targets": [
            {
              "expr": "sum(rate(auth_login_attempts_total[5m])) by (status)",
              "legendFormat": "Login {{status}}",
              "refId": "A"
            },
            {
              "expr": "sum(rate(auth_registration_attempts_total[5m])) by (status)",
              "legendFormat": "Registration {{status}}",
              "refId": "B"
            }
          ],
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            }
          }
        }
      ],
      "refresh": "10s",
      "schemaVersion": 33,
      "style": "dark",
      "tags": ["auth", "monitoring"],
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "browser",
      "title": "Authentication Service Dashboard",
      "uid": "auth-service",
      "version": 1
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: mankahi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      automountServiceAccountToken: false
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: grafana-config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-provisioning
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboards
              mountPath: /var/lib/grafana/dashboards
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
          env:
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "false"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
              ephemeral-storage: "5Gi"
            limits:
              memory: "512Mi"
              cpu: "500m"
              ephemeral-storage: "6Gi"
      volumes:
        - name: grafana-config
          configMap:
            name: grafana-config
        - name: grafana-storage
          emptyDir: {}
        - name: grafana-provisioning
          configMap:
            name: grafana-provisioning
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: mankahi
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: mankahi
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: mankahi
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: monitoring.mankahi.local
      http:
        paths:
          - path: /prometheus
            pathType: Prefix
            backend:
              service:
                name: prometheus-service
                port:
                  number: 9090
          - path: /grafana
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: 3000
