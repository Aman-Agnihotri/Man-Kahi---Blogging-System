apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: mankahi
type: Opaque
stringData:
  # JWT Configuration 
  JWT_SECRET: "<your-64-character-jwt-secret>"
  JWT_ACCESS_EXPIRES_IN: "15m"  # Shorter expiry for production
  JWT_REFRESH_EXPIRES_IN: "7d"
  
  # Session Configuration
  SESSION_SECRET: "<your-64-character-session-secret>"
  
  # OAuth Configuration
  GOOGLE_CLIENT_ID: "<your-google-client-id>"
  GOOGLE_CLIENT_SECRET: "<your-google-client-secret>"
  GOOGLE_CALLBACK_URL: "https://api.mankahi.local/auth/google/callback"
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: mankahi
type: Opaque
stringData:
  # Database Configuration
  POSTGRES_USER: "prod_user"
  POSTGRES_PASSWORD: "<your-secure-production-password>"
  POSTGRES_DB: "mankahi_db"
  # Using k8s service discovery
  DATABASE_URL: "postgresql://prod_user:<your-secure-production-password>@postgres-service.mankahi.svc.cluster.local:5432/mankahi_db"
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: mankahi
type: Opaque
stringData:
  # Redis Configuration with authentication
  REDIS_URL: "redis://:<your-redis-password>@redis-service.mankahi.svc.cluster.local:6379"
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secrets
  namespace: mankahi
type: Opaque
stringData:
  # MinIO Production Configuration
  MINIO_ROOT_USER: "<your-production-minio-user>"
  MINIO_ROOT_PASSWORD: "<your-production-minio-password>"
  MINIO_ACCESS_KEY: "<your-production-minio-access-key>"
  MINIO_SECRET_KEY: "<your-production-minio-secret-key>"
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
  namespace: mankahi
type: Opaque
stringData:
  # Elasticsearch Production Configuration
  ELASTICSEARCH_USERNAME: "elastic"
  ELASTICSEARCH_PASSWORD: "<your-production-elastic-password>"

# PRODUCTION SETUP INSTRUCTIONS:
# 1. Copy this file to secrets.yaml
# 2. Replace all placeholder values (enclosed in <...>)
# 3. Ensure secrets.yaml is in .gitignore
# 4. Use different, strong secrets for production
# 5. Consider using a secrets management solution
# 6. Enable audit logging
# 7. Configure proper TLS/SSL
# 8. Implement regular secret rotation
# 9. Never commit actual secrets to version control

# Security Recommendations:
# - JWT_SECRET: Use a cryptographically secure random generator
# - Passwords: Minimum 16 characters with mixed case, numbers, and symbols
# - API Keys: Use separate keys for each environment
# - Database: Use separate credentials for each service if possible
# - Enable encryption at rest for all sensitive data
# - Monitor secret usage and implement alerts
