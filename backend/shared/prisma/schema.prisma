generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(cuid())
    username  String    @unique @db.VarChar(50)
    email     String    @unique @db.VarChar(100)
    password  String?   @db.VarChar(255) // Nullable for OAuth users
    createdAt DateTime  @default(now()) @db.Timestamp(6)
    updatedAt DateTime  @updatedAt @db.Timestamp(6)
    deletedAt DateTime? @db.Timestamp(6)

    blogs          Blog[] // Relation to blogs authored by the user
    roles          UserRole[] // Relation to user roles
    oAuthProviders OAuthProvider[] // Relation to OAuth providers

    @@map("users")
}

model OAuthProvider {
    id         String   @id @default(cuid())
    provider   String // e.g. 'google', 'github'
    providerId String // ID from the provider
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    createdAt  DateTime @default(now()) @db.Timestamp(6)
    updatedAt  DateTime @updatedAt @db.Timestamp(6)

    @@unique([provider, providerId])
    @@unique([provider, userId])
    @@map("oauth_providers")
}

model Blog {
    id          String    @id @default(cuid())
    title       String    @db.VarChar(200)
    content     String    @db.Text
    readTime    Int       @default(0) // Estimated read time in minutes
    slug        String    @unique // SEO-friendly URL
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt @db.Timestamp(6)
    deletedAt   DateTime? @db.Timestamp(6)
    published   Boolean   @default(false)
    description String?   @db.Text // For SEO meta description

    authorId String
    author   User   @relation(fields: [authorId], references: [id])

    tags       BlogTag[]
    categoryId String?
    category   Category? @relation(fields: [categoryId], references: [id])

    analytics BlogAnalytics?

    @@index([title])
    @@index([slug])
    @@index([authorId, createdAt])
    @@index([published, createdAt])
    @@map("blogs")
}

model BlogAnalytics {
    id           String   @id @default(cuid())
    blogId       String   @unique
    views        Int      @default(0)
    uniqueViews  Int      @default(0)
    reads        Int      @default(0)
    readProgress Float    @default(0) // Average read progress (0-100%)
    linkClicks   Int      @default(0)
    lastUpdated  DateTime @updatedAt

    recentVisitors Json? @db.JsonB // Store unique visitors for last 24h as array of hashed IPs
    blog           Blog  @relation(fields: [blogId], references: [id])

    @@index([views(sort: Desc)])
    @@map("blog_analytics")
}

// New model for cache control
model CacheControl {
    id              String    @id @default(cuid())
    key             String    @unique // Cache key (e.g., blog:slug, search:query)
    lastInvalidated DateTime  @default(now())
    invalidateAt    DateTime? // Schedule invalidation
    ttl             Int       @default(3600) // Time to live in seconds
    type            String // Type of cached content (blog, search, etc.)

    @@index([key])
    @@index([type, lastInvalidated])
    @@map("cache_control")
}

// New model for tracking real-time analytics events
model AnalyticsEvent {
    id        String   @id @default(cuid())
    blogId    String
    type      String // Event type (view, read, click)
    timestamp DateTime @default(now())
    metadata  Json?    @db.JsonB // Additional event data

    @@index([timestamp(sort: Desc)])
    @@index([blogId, type, timestamp])
    @@map("analytics_events")
}

model BlogTag {
    id     String @id @default(cuid())
    blogId String
    blog   Blog   @relation(fields: [blogId], references: [id])

    tagId String
    tag   Tag    @relation(fields: [tagId], references: [id])

    @@unique([blogId, tagId]) // Ensure a blog cannot have duplicate tags
    @@index([tagId]) // Index added for efficient tag-based filtering
    @@map("blog_tags")
}

model Tag {
    id          String    @id @default(cuid())
    name        String    @unique @db.VarChar(50)
    description String?   @db.Text // Optional description for SEO or metadata
    blogs       BlogTag[]

    @@map("tags")
}

model Category {
    id    String @id @default(cuid())
    name  String @unique @db.VarChar(50)
    blogs Blog[]

    @@map("categories")
}

model UserRole {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])

    roleId String
    role   Role   @relation(fields: [roleId], references: [id])

    assignedAt  DateTime     @default(now())
    permissions Permission[] // Relation to permissions assigned to the role

    @@unique([userId, roleId])
    @@map("user_roles")
}

model Role {
    id          String           @id @default(cuid())
    name        String           @unique @db.VarChar(50)
    users       UserRole[]
    permissions RolePermission[] // Updated to reference join table

    @@map("roles")
}

model RolePermission {
    id           String     @id @default(cuid())
    roleId       String
    permissionId String
    role         Role       @relation(fields: [roleId], references: [id])
    permission   Permission @relation(fields: [permissionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([roleId, permissionId])
    @@map("role_permissions")
}

model Permission {
    id          String           @id @default(cuid())
    name        String           @unique @db.VarChar(100)
    description String?          @db.Text
    roles       RolePermission[]
    slug        String           @unique @db.VarChar(50) // For immutability
    UserRole    UserRole?        @relation(fields: [userRoleId], references: [id])
    userRoleId  String?

    @@map("permissions")
}
