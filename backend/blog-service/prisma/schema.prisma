generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Blog {
    id          String    @id @default(cuid())
    title       String    @db.VarChar(200)
    slug        String    @unique @db.VarChar(200)
    description String?   @db.Text
    content     String    @db.Text
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt @db.Timestamp(6)
    deletedAt   DateTime? @db.Timestamp(6)
    published   Boolean   @default(false)

    // Relations
    authorId   String
    author     User           @relation(fields: [authorId], references: [id])
    tags       BlogTag[]
    category   Category?      @relation(fields: [categoryId], references: [id])
    categoryId String?
    analytics  BlogAnalytics?

    // Full text search indexes
    @@index([title])
    @@index([content])
    // Common query patterns
    @@index([authorId, createdAt])
    @@index([categoryId])
    @@index([published, createdAt])
    @@map("blogs")
}

model Category {
    id          String   @id @default(cuid())
    name        String   @unique @db.VarChar(50)
    description String?  @db.Text
    slug        String   @unique @db.VarChar(50)
    blogs       Blog[]
    createdAt   DateTime @default(now()) @db.Timestamp(6)
    updatedAt   DateTime @updatedAt @db.Timestamp(6)

    @@map("categories")
}

model Tag {
    id          String    @id @default(cuid())
    name        String    @unique @db.VarChar(50)
    description String?   @db.Text
    slug        String    @unique @db.VarChar(50)
    blogs       BlogTag[]
    createdAt   DateTime  @default(now()) @db.Timestamp(6)
    updatedAt   DateTime  @updatedAt @db.Timestamp(6)

    @@map("tags")
}

model BlogTag {
    id        String   @id @default(cuid())
    blog      Blog     @relation(fields: [blogId], references: [id])
    blogId    String
    tag       Tag      @relation(fields: [tagId], references: [id])
    tagId     String
    createdAt DateTime @default(now()) @db.Timestamp(6)

    @@unique([blogId, tagId])
    @@index([tagId])
    @@map("blog_tags")
}

model BlogAnalytics {
    id           String   @id @default(cuid())
    blog         Blog     @relation(fields: [blogId], references: [id])
    blogId       String   @unique
    views        Int      @default(0)
    uniqueViews  Int      @default(0)
    reads        Int      @default(0)
    avgTimeSpent Int      @default(0)
    createdAt    DateTime @default(now()) @db.Timestamp(6)
    updatedAt    DateTime @updatedAt @db.Timestamp(6)

    @@map("blog_analytics")
}

// Reference to User model from auth service
model User {
    id        String   @id
    blogs     Blog[]
    createdAt DateTime @default(now()) @db.Timestamp(6)
    updatedAt DateTime @updatedAt @db.Timestamp(6)

    @@map("users")
}
